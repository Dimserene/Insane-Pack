[manifest]
version = "1.0.0"
dump_lua = true
priority = 9999999999

[[patches]]
[patches.pattern]
target = "engine/text.lua"
pattern = "self.string = self.strings[self.focused_string].string"
position = "at"
payload = "if self.strings and self.focused_string and self.strings[self.focused_string] and self.strings[self.focused_string].string then self.string = self.strings[self.focused_string].string else return end"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "if context.cardarea == G.play then"
position = "after"
payload = '''if card.edition and card.edition.jen_wee and card.playing_card then
	card_eval_status_text(card, 'extra', nil, nil, nil, {message = localize('k_upgrade_ex'), colour = G.C.FILTER})
	card.ability.perma_bonus = (card.ability.perma_bonus or 0) + (((card.ability.name or '') == 'Stone Card' or card.config.center.no_rank) and 25 or (card:get_id() * 3))
	card_eval_status_text(card, 'extra', nil, nil, nil, {message = tostring(card.ability.perma_bonus), colour = G.C.CHIPS})
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "elseif context.individual then"
position = "after"
payload = '''if context.cardarea == G.play then
	if self.edition and self.edition.jen_wee and context.other_card:get_id() == 2 then
		self.edition.twos_scored = (self.edition.twos_scored or 0) + 1
		card_eval_status_text(self, 'extra', nil, nil, nil, {message = localize('k_upgrade_ex') .. " : " .. (tostring(100 + (8*self.edition.twos_scored)) .. '%'), colour = G.C.DARK_EDITION})
		self:remove_from_deck()
		cry_misprintize(self, {min = 1 + (0.08 * self.edition.twos_scored),max = 1 + (0.08 * self.edition.twos_scored)})
		self:add_to_deck()
	end
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "self.VT.h = self.T.H"
position = "at"
payload = '''if not self.originalsize then self.originalsize = {self.T.w, self.T.h} end
if cardTable.edition and cardTable.edition.jen_wee then
	self.T.w = self.T.w / Jen.config.wee_sizemod
	self.T.h = self.T.h / Jen.config.wee_sizemod
elseif cardTable.edition and cardTable.edition.jen_jumbo then
	self.T.w = self.T.w * Jen.config.wee_sizemod
	self.T.h = self.T.h * Jen.config.wee_sizemod
end
self.VT.h = self.T.h'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '{n=G.UIT.T, config={text = "X", '
position = "at"
payload = '{n=G.UIT.T, config={id = "chipmult_operator", text = "X", '
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = 'button = not G.SETTINGS.tutorial_complete and "start_run" or "setup_run"'
position = "at"
payload = 'func = "isomeganumenabled", button = not G.SETTINGS.tutorial_complete and "start_run" or "setup_run"'
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "label = {localize('b_play_cap')}"
position = "at"
payload = "label = {(Big and Big.arrow) and localize('b_play_cap') or 'OMEGANUM NOT ENABLED, GO TO TALISMAN SETTINGS'}"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/misc_functions.lua"
pattern = "G.ARGS.score_intensity.organ = G.video_organ or G.ARGS.score_intensity.required_score > 0 and math.max(math.min(0.4, 0.1*math.log(G.ARGS.score_intensity.earned_score/(G.ARGS.score_intensity.required_score+1), 5)),0.) or 0"
position = "at"
payload = '''
if Big.arrow then
	local notzero = to_big(G.ARGS.score_intensity.required_score) > to_big(0)
	local e_s = to_big(G.ARGS.score_intensity.earned_score)
	local r_s = to_big(G.ARGS.score_intensity.required_score+1)
	local googol = to_big(1e100)
	local requirement5 = to_big(math.max(math.min(1, 0.1*(math.log(e_s/(r_s:arrow(4, googol)), 5))),0.))
	local requirement4 = to_big(math.max(math.min(1, 0.1*(math.log(e_s/(r_s:arrow(3, googol)), 5))),0.))
	local requirement3 = to_big(math.max(math.min(1, 0.1*(math.log(e_s/(r_s:arrow(2, googol)), 5))),0.))
	local requirement2 = to_big(math.max(math.min(1, 0.1*(math.log(e_s/(r_s^googol), 5))),0.))
	local requirement1 = math.max(math.min(1, 0.1*math.log(G.ARGS.score_intensity.earned_score/((G.ARGS.score_intensity.required_score+1)*1e100), 5)),0.)
	if not G.ARGS.score_intensity.ambientDramatic2 then G.ARGS.score_intensity.ambientDramatic2 = 0 end
	if not G.ARGS.score_intensity.ambientDramatic1 then G.ARGS.score_intensity.ambientDramatic1 = 0 end
	if not G.ARGS.score_intensity.ambientSurreal3 then G.ARGS.score_intensity.ambientSurreal3 = 0 end
	if not G.ARGS.score_intensity.ambientSurreal2 then G.ARGS.score_intensity.ambientSurreal2 = 0 end
	if not G.ARGS.score_intensity.ambientSurreal1 then G.ARGS.score_intensity.ambientSurreal1 = 0 end
	G.ARGS.score_intensity.ambientDramatic2 = notzero and requirement5:to_number() or 0
	G.ARGS.score_intensity.ambientDramatic1 = ((G.ARGS.score_intensity.ambientDramatic2 or 0) <= 0.05 and notzero) and requirement4:to_number() or 0
	G.ARGS.score_intensity.ambientSurreal3 = ((G.ARGS.score_intensity.ambientDramatic2 or 0) <= 0.05 and (G.ARGS.score_intensity.ambientDramatic1 or 0) <= 0.05 and notzero) and requirement3:to_number() or 0
	G.ARGS.score_intensity.ambientSurreal2 = ((G.ARGS.score_intensity.ambientDramatic2 or 0) <= 0.05 and (G.ARGS.score_intensity.ambientDramatic1 or 0) <= 0.05 and (G.ARGS.score_intensity.ambientSurreal3 or 0) <= 0.05 and notzero) and requirement2:to_number() or 0
	G.ARGS.score_intensity.ambientSurreal1 = ((G.ARGS.score_intensity.ambientDramatic2 or 0) <= 0.05 and (G.ARGS.score_intensity.ambientDramatic1 or 0) <= 0.05 and (G.ARGS.score_intensity.ambientSurreal3 or 0) <= 0.05 and (G.ARGS.score_intensity.ambientSurreal2 or 0) <= 0.05 and notzero) and requirement1 or 0
	G.ARGS.score_intensity.organ = (G.video_organ or ((G.ARGS.score_intensity.ambientSurreal3 or 0) <= 0.05 and (G.ARGS.score_intensity.ambientSurreal2 or 0) <= 0.05 and (G.ARGS.score_intensity.ambientSurreal1 or 0) <= 0.05 and notzero)) and math.max(math.min(1, 0.1*math.log(G.ARGS.score_intensity.earned_score/(G.ARGS.score_intensity.required_score+1), 5)),0.) or 0
	notzero = nil
	e_s = nil
	r_s = nil
	googol = nil
	requirement5 = nil
	requirement4 = nil
	requirement3 = nil
	requirement2 = nil
	requirement1 = nil
else
	G.ARGS.score_intensity.organ = G.video_organ or G.ARGS.score_intensity.required_score > 0 and math.max(math.min(0.4, 0.1*math.log(G.ARGS.score_intensity.earned_score/(G.ARGS.score_intensity.required_score+1), 5)),0.) or 0
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/misc_functions.lua"
pattern = "ambientOrgan1 = {volfunc = function(_prev_volume) return _prev_volume*(1 - dt) + dt*0.6*(G.SETTINGS.SOUND.music_volume + 100)/200*(G.ARGS.score_intensity.organ) end},"
position = "after"
payload = '''
	jen_ambientSurreal1 = {volfunc = function(_prev_volume) return _prev_volume*(1 - dt) + dt*0.6*(G.SETTINGS.SOUND.music_volume + 100)/200*((G.ARGS.score_intensity.ambientSurreal1 or 0) * 1.8) end},
	jen_ambientSurreal2 = {volfunc = function(_prev_volume) return _prev_volume*(1 - dt) + dt*0.6*(G.SETTINGS.SOUND.music_volume + 110)/200*((G.ARGS.score_intensity.ambientSurreal2 or 0) * 2) end},
	jen_ambientSurreal3 = {volfunc = function(_prev_volume) return _prev_volume*(1 - dt) + dt*0.6*(G.SETTINGS.SOUND.music_volume + 120)/200*((G.ARGS.score_intensity.ambientSurreal3 or 0) * 2.2) end},
	jen_ambientDramatic1 = {volfunc = function(_prev_volume) return _prev_volume*(1 - dt) + dt*0.6*(G.SETTINGS.SOUND.music_volume + 135)/200*((G.ARGS.score_intensity.ambientDramatic1 or 0) * 2.4) end},
	jen_ambientDramatic2 = {volfunc = function(_prev_volume) return _prev_volume*(1 - dt) + dt*0.6*(G.SETTINGS.SOUND.music_volume + 150)/200*((G.ARGS.score_intensity.ambientDramatic2 or 0) * 2.6) end},
'''
match_indent = true